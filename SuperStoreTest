// SuperStore Exercise: Access Modifiers & Object Modeling Focus

class Product{
    protected String name;
    protected double price;
    private final int productId;
    public static int nextId = 1;

    public Product(String name, double price){
        this.name = name;
        this.price = price;
        this.productId = nextId++;
    }
    public String getname() {
        return name;
    }
    public double getprice() {
        return price;
    }
    public int getproductId() {
        return productId;
    }
    @Override
    public String toString() {
        return "\nName: " + name + "\nPrice: $" + price + "\nProductId: " + productId;
    }
    public boolean equals(Object o){
        if (this == o) return true;

        if(!(o instanceof Product)) return false;
        Product other = (Product) o;

        return this.name.equals(other.name);

    }
}
// TODO: Define a class called Product with:
// - A protected String field called name
// - A protected double field called price
// - A private final int productId
// - A public static int nextId to help generate unique IDs
// - A constructor that sets name, price, and assigns a unique ID
// - Public getters for all fields
// - Override toString() to return formatted product details
// - Override equals(Object o) to compare name and productId

class Electronics extends Product{
    private String brand;
    private boolean hasBattery;
    Electronics(String name, double price,String brand,boolean hasBattery ){
        super(name,price);
        this.brand = brand;
        this.hasBattery= hasBattery;
    }
    public final String warrantyInfo(){
        return "There is a 10 year warranty";
    }
    @Override
    public String toString() {
        return super.toString() + "\nBrand: " + brand + "\nIt has Battery: " + hasBattery ;
    }
}

// TODO: Define a subclass Electronics that extends Product
// - Add a private String field called brand
// - Add a private boolean field called hasBattery
// - Constructor takes all fields and uses super for shared ones
// - Override toString() to include brand and battery status

class Grocery extends Product{
    private double weight;
    private boolean isPerishable;
    public Grocery(String name, double price, double weight,boolean isPerishable ){
        super(name,price);
        this.weight= weight;
        this.isPerishable = isPerishable;
    }
    @Override
    public String toString() {
        return super.toString() + "\nWeight in kg: " + weight + "\nIt is perishable: " + isPerishable + "\n";
    }
}

// TODO: Define a subclass Grocery that extends Product
// - Add a private double field called weight (in kg)
// - Add a private boolean field called isPerishable
// - Constructor takes all fields and uses super for shared ones
// - Override toString() to include weight and perishability

final class Toy extends Product{
    private int minAge;
    public Toy(String name, double price, int minAge){
        super(name,price);
        this.minAge= minAge;
    }
    @Override
    public String toString() {
        return super.toString() + "\nMinimum age is: " + minAge;
    }
}
class Coupon {
    private final double discountrate;

    public Coupon(double discountrate){
        this.discountrate = discountrate;
    }
    public double apply(Product x){
        return x.getprice() * (1-discountrate);
    }
}

// TODO: Define a final class Toy that extends Product
// - Add a private int field called minAge
// - Constructor takes all fields and uses super for shared ones
// - Override toString() to include minAge

public class SuperStoreTest{
    public static void main(String[] args) {
        Product phone = new Electronics("Iphone", 99, "Apple", true);
        Product food = new Grocery("Oranges", 6, 45.6, true);
        Product toy = new Toy("Stuffed Bear", 3.45, 5);
        Product phone2 = new Electronics("Iphone", 99, "Apple", true);
        Product[] array = {phone, food, toy};

        for (Product x: array){
            System.out.println(x.toString());
        }
        System.out.println("\nIs phone1 equal to phone2: " + phone.equals(phone2));
        Coupon coupon = new Coupon(0.2);
        System.out.println("The discounted price is: $" + coupon.apply(phone));
        System.out.println(((Electronics) phone).warrantyInfo());
    }


}
// TODO: Define class SuperStoreTest with a main method
// - Create at least one instance of each subclass
// - Store them in a Product[] array
// - Loop through and print each item
// - Call equals() to compare two products with the same ID and name

// Additional TODOs:
// 1. Try to extend Toy â€” what happens and why?     
// 2. Make a class Coupon with a final discountRate and apply it to a Product
// 3. Add a method to Electronics called warrantyInfo() and mark it final
// 4. Use access modifiers appropriately and explain your choices in comments

//1. It can't be extended since Toy class is final.
//4.I used protected to allow subclasses to access the variables. productId is private because it shouldn't be altered directly. warrantyInfo is final so it cannot be overridden.

// Base class
class Animal {
    protected String name;

    Animal() {
        this.name = "Cow";
    }

    public Animal(String name) {
        this.name = name;
    }

    public void speak() {
        System.out.println("Moo");
    }

    @Override
    public String toString() {
        return "Animal: " + name;
    }

    @Override
    public boolean equals(Object o) {
        if (o instanceof Animal) {
            Animal other = (Animal) o;
            return this.name.equals(other.name);
        }
        return false;
    }
}

// Subclass
class Mammal extends Animal {
    protected boolean warmBlooded = true;
    protected String dietType = "carnivore";
    protected int numLegs = 4;
    protected String sound = "growl";

    Mammal() {
        super("lion");
    }

    Mammal(String name, boolean warmBlooded, String dietType, int numLegs, String sound) {
        super(name);
        this.warmBlooded = warmBlooded;
        this.dietType = dietType;
        this.numLegs = numLegs;
        this.sound = sound;
    }

    @Override
    public void speak() {
        System.out.println(name + " " + sound);
    }

    public void performTrick() {
        System.out.println(name + " performs a trick!");
    }
}

// Dog subclass
class Dog extends Mammal {
    Dog(String name) {
        super(name, true, "omnivore", 4, "Woof!");
    }

    @Override
    public void speak() {
        System.out.println(name + " says: " + sound);
    }

    @Override
    public boolean equals(Object o) {
        return o instanceof Dog && super.equals(o);
    }
}

// Cat subclass
class Cat extends Mammal {
    Cat(String name) {
        super(name, true, "carnivore", 4, "Meow!");
    }

    @Override
    public void speak() {
        System.out.println(name + " says: " + sound);
    }

    @Override
    public boolean equals(Object o) {
        return o instanceof Cat && super.equals(o);
    }
}

// Final Human class
final class Human extends Mammal {
    Human(String name) {
        super(name, true, "omnivore", 2, "Hello!");
    }
}

// Reptile class
class Reptile extends Animal {
    protected boolean warmBlooded;
    protected String dietType;
    protected int numLegs;
    protected String sound;

    Reptile(String name, boolean warmBlooded, String dietType, int numLegs, String sound) {
        super(name);
        this.warmBlooded = warmBlooded;
        this.dietType = dietType;
        this.numLegs = numLegs;
        this.sound = sound;
    }

    @Override
    public void speak() {
        System.out.println(name + " says: " + sound);
    }
}

// Extra subclass (Bird)
class Bird extends Animal {
    Bird(String name) {
        super(name);
    }

    @Override
    public void speak() {
        System.out.println(name + " chirps!");
    }
}

// Main test class
public class AnimalKingdomTest {
    public static void main(String[] args) {
        Animal a1 = new Dog("Buddy");
        Animal a2 = new Cat("Whiskers");

        a1.speak();
        a2.speak();

        System.out.println(a1);
        System.out.println(a2);

        System.out.println(a1.equals(new Dog("Buddy")));

        if (a1 instanceof Mammal) {
            ((Mammal) a1).performTrick();
        }

        // Bird test
        Bird b = new Bird("Parrot");
        b.speak();

        //Human class is final and cannot be changed.
    }
}
